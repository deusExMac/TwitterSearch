[General]

; Total maximum number of Tweets to fetch. -1 for unlimited
; TODO: Not used in this version
maxTweets = 4000

; Total maximum number of Tweets to fetch during each from-to period
; -1 for unlimited
maxTweetsPerPeriod = 14

; Default language of Tweets, if not explicitly specified in the query
; TODO: Not used in this version (deprecated)
defaultLang = el


; Maximum samples of download speeds to
; keep in our queue out of which the average speed will be calculated
downloadSpeedWindow = 150




[Network]

; Timeout for connecting to endpoint (in seconds)
; Set to negative or zero if no timeout is desired
netConnectTimeout = 6.9

; Timeout for reading response from endpoint (in seconds)
; Set to negative or zero if no timeout is desired
netReadTimeout = 10.5






[TwitterAPI]

; Two values supported: historic and recent
; IMPORTANT: This value determines what value the setting Bearer will take
;            Bearer is set automatically on startup.
targetArchive = historic


; 
; Settings to store URI to specific endpoints searching specific
; parts of the Twitter archive: recent or historic.
; The actual URI used is in the apiEndpoint setting. Based on the value
; of targetArchive, the proper URI is copied to apiEndpoint during startup
;
; Recent archive: https://api.twitter.com/2/tweets/search/recent
; Historic archive: https://api.twitter.com/2/tweets/search/all
; 
recentApiEndPoint = https://api.twitter.com/2/tweets/search/recent
historicApiEndPoint = https://api.twitter.com/2/tweets/search/all

; The actual URI to Endpoint that will be used i.e. requests will be send. 
; This setting is set during startup based on the value of targetArchive.
apiEndPoint = https://api.twitter.com/2/tweets/search/recent


;
; bearer tokens, for Essential and Academic access.
; These settings here act as places to store these tokens. The one
; actually used is determined during startup, based on the value of targetArchive.
; Bearer tokens might be stored here either as plain text or encrypted. See setting
; bearerEncrypted.
;
; IMPORTANT: Get an essential or academic bearer token and set it as value
; for the proper variable. 
; In order to get a bearer token, you need a Twitter developer account. Instructions
; on how to get a developer account for free, see:
; https://developer.twitter.com/en/support/twitter-api/developer-account
;

essentialBearer = gAAAAABiU859EO8BlsudvTJG2vUjxsQDq5vhIroBpJDxzhqJIdLSZPurzbZB7-QrJdqyQt1wgHTt229D5zTg0FICIoxppuLWooO18PfeFeLM7HcXC2EPcHN1Yo7A2uzUL0OLUdcV5UrO0QriLIn_wk53tlR2WS6c8Rl2bpNOWxcaz1qTdvzQmF817qmDTDXxcbD_jiHqr-pjixTY72tttStMuPnU7RoBTHwVddVs5Mk1c3ker0t7bS4=
academicBearer = gAAAAABiU859L5wAviWYm48l4EgKBQBmTn1I9l4bDLfFS9u5N3GAX72-djX_0FBwWoR5Kw_S9PILDjfv33kVhtxYFf5M2gsCTHnuwLC6c66lqANj7gb5YoiYh4j_imaKoU-3PbMHUSv59YJr-Qz4H_6rPhoQI_27MkIhfb-kC9Ucb3F6S5gGONQ44eVSwTwOB8B8tAUKzHuZTfrxv3NzMyr0OPyuSCn1ferlLMFD8ycANcN-1n_RmHo=

; The bearer token that will be actually used during requests. 
; During startup, this value is set automatically based on the value of
; setting targetArchive: if targetArchive has value recent, essentialBearer token
; is used; if targetArchive has value historic, academicBearer token will be used.
Bearer = XXXXX



; If setting bearerEncrypted is set to true, the values
; of settings essentialBearer and academicBearer in this config file
; are consiredered as encrypted. Otherwise, they are considered as plain text.
; In order to be used in requests, they must be decrypted first.
bearerEncrypted = true

; Path to file containing the decryption key. Twitter search supports symmetric encryption based
; on the Fernet class.
; The value inside this file acts as the key to decrypt encrypted bearer tokens.
; TwitterSearch supports encryption of Bearer tokens and the generation of the file containing the key.
; See command encryptBearer in the help.
;
; IMPORTANT! Make sure this file is kept in a safe directory; exclude it
; from versioning and do not shared it with others if you don't want
; others to use your bearer tokens.
encryptionKeyFile = etc/enc.key


; Number of tweets to ask for from Twitter v2 endpoint
maxEndpointTweets = 72 

;
; Which fields to request.
; For more details on fields see:
; https://developer.twitter.com/en/docs/twitter-api/fields
; https://developer.twitter.com/en/docs/twitter-api/data-dictionary/using-fields-and-expansions
;
; Data dictionaries for Twitter's object model can be found here:
; https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user
; https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet
; https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/place
;
tweet.fields = id,text,author_id,in_reply_to_user_id,geo,conversation_id,created_at,lang,public_metrics,referenced_tweets,reply_settings,source
user.fields = id,name,username,created_at,description,public_metrics,verified
place.fields = full_name,id,country,country_code,geo,name,place_type
expansions = author_id,in_reply_to_user_id,geo.place_id



[Request]
; Time to sleep between two consecutive requests (in seconds)
sleepTime = 5.12




[Storage]

; Currently only csv supported
format = csv 



; csv separator
csvSeparator = ;

; default csv file to store tweets if no output file is specified in commands.
csvFile = tweets.csv

 

[Shell]

; How many commands to keep in history 
historySize = 125

; Prompt of shell
commandPrompt = TwitterSearch >>

; Not used in this version
aliasFile = .alias


[Debug]

debugMode = false

; Setting showProgress to true will result in displaying 
; some metrics related to number of tweets received, stored as
; well as the average download speed in tweets/sec.
showProgress = true

; not supported in this version
saveJsonResponses = true

; not supported in this version
logFile = twitterSearch.log


